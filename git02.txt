# Git Flow


# GitHub Flow
    main develop 등등의 여러개의 브랜치를 사용한다.

# Trunk Based
    trunk에 바로 merge를 한다.

# branch
repository 안에서 분기를 나눌 수 있다.

- 항시 있는 branch
    main(master) : default branch
    dev(release, v0.1 ...) : development branch
    
- 일시적인 branch(사용 완료 후 삭제)
    feat
    fixed
    style
    예 - feat/login, style/event-screen, hotfix/sns-login

- Semantic Commit Message
    feat(type): add hat wobble(Summary in present tense.)

    1. feat
        새로운 기능 추가
        (new feature for the user, not a new feature for build script)
        
    2. fix
        개발 도중 생긴 버그 수정
        (bug fix for the user, not a fix to a build script)
        
    3. docs
        문서 수정
        (changes to the documentation)

    4. style
        레이아웃, 코드 스타일 수정
        (formatting, missing semi colons, etc; no production code change)
        
    5. refactor
        지저분한 코드 개선, 기능 개선
        (refactoring production code, eg. renaming a variable)

    6. test
        테스트 코드 변경
        (adding missing tests, refactoring tests; no production code change)

    7. chore
        로직 외 코드 수정
        (updating grunt tasks etc; no production code change)

    예 - 🙏feat: 로그인 로직을 추가하였습니다. style: 이벤트 스크린의 배너를 추가였습니다.
    (윈도우 + . : 이모지)         

# Flow
- repository 생성

- 로컬 저장소(.git)과 원격저장소(github) 연결

- init 파일을 main에 push (프로젝트 폴더 구조)

- 분기점(branch) 생성
    1. git branch
        현재 내 로컬 환경에 만들어진 branch 목록을 확인한다.
    
    2. git branch 브랜치명
        해당 브랜치명의 브랜치를 내 로컬 환경에 생성한다.

    3. git branch -d 브랜치명
        해당 브랜치명의 브랜치 로컬 환경에서 삭제한다.

    4. git checkout 브랜치명
        현재 내 로컬 환경에서 바라보고 있는 브랜치 변경

    5. git checkout -b 브랜치명
        브랜치 생성과 이동을 한번에 해주는 명령어
        단, 해당 브랜치는 현재 내 로컬 환경 브랜치 목록에 존재해서는 안된다.

- 새로운 브랜치 생성 후 원격 저장소와 연결한다.
    개발 중에도 버전 관리는 이루어져야 한다.

    1. git add .

    2. git commit -m "메세지"

    3. git pull 원격저장소명 새로운브랜치명 --rebase
        머지 기록 없이 pull을 받는다.
        ?? merge와 rebase의 차이 ??

    4. git push origin 새로운브랜치명
        원격저장소에도 분기를 생성한다.

- 개발 종료 후 메인 브랜치와 합친다.
    1. git checkout main

    2. git pull origin main

    3. git checkout 작업완료한브랜치명

    4. git merge 합칠브랜치명

    5. conflict 상황 발생 시
        resolve 

- stash
    1. git stash
        현재 브랜치에서 수정사항이 있으면 무조건 commit 후 다른 브랜치로 이동해야한다.
        이때 stash를 하면 스테이징 된 파일을 잠깐 저장할 수 있다.

    2. git checkout main

    3. git pull origin main

    4. git checkout 수정사항이있던브랜치명

    5. git stash pop
        가장 최근 스테이징 내역을 다시 빼온다.

- pull request
    내 기존 브랜치에 푸쉬 후 허락을 구한다.
    코드 리뷰를 요청한다.
    
    1. git push origin 새로운브랜치

    2. pull request
        목적지 설정 (main, v0.1)

    3. code review

    4. 확인 후 자동 merge

- 새로운 feat가 merge된 main 브랜치 pull 받는다.
    1. git checkout main

    2. git pull origin main
        원격 저장소와 내 로컬 환경 main 브랜치를 동기화한다.
        자동으로 되어있을 수 있다.

# Organizations
    Your Organizations > New Organizations > Creat a free Organization
    > Organization account name 설정 > Contact email 설정 > My personal account 체크 > accept 체크 > Next
    > Add organization members >  Owner 권한으로 준다.

    Create a new repository > Collaborators and teams > Manage access > Add people > Role을 지정한다.




- clone

- fork

- merge

- product

- issue

# 호스팅 (dothome, FTP, github)